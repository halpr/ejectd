#!/bin/bash
#
# Ejectd - External Drive Ejector
# Author: Filipe Soares
# GitHub: https://github.com/halpr
# License: MIT
# Version: 1.0.0
# Description: Safe ejection tool for external drives

# Colors and styling
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m'

# Icons (using Unicode symbols for better visual appeal)
ICON_DRIVE="💾"
ICON_USB="🔌"
ICON_MOUNTED="📌"
ICON_UNMOUNTED="⭕"
ICON_SUCCESS="✅"
ICON_ERROR="❌"
ICON_WARNING="⚠️"
ICON_EJECT="⏏️"

# Function to convert bytes to human readable format
bytes_to_human() {
    local bytes=$1
    if [ "$bytes" -lt 1024 ]; then
        echo "${bytes}B"
    elif [ "$bytes" -lt 1048576 ]; then
        echo "$((bytes / 1024))KB"
    elif [ "$bytes" -lt 1073741824 ]; then
        echo "$((bytes / 1048576))MB"
    else
        echo "$(awk "BEGIN {printf \"%.1f\", $bytes/1073741824}")GB"
    fi
}

# Function to display the header
show_header() {
    clear
    echo
    echo -e "${BOLD}${MAGENTA}Ejectd ${ICON_EJECT} External Drive Ejector${NC}"
    echo -e "${DIM}Safe removal tool for external drives${NC}"
    echo
}

# Function to display drives
show_drives() {
    show_header
    
    # Get list of all drives except the main system drive
    root_drive=$(lsblk -no PKNAME "$(findmnt -n -o SOURCE /)" 2>/dev/null)
    mapfile -t all_drives < <(lsblk -ndo NAME,TYPE | awk '$2=="disk" {print $1}')

    drives=()
    for drive in "${all_drives[@]}"; do
        if [ "$drive" != "$root_drive" ]; then
            drives+=("/dev/$drive")
        fi
    done

    if [ ${#drives[@]} -eq 0 ]; then
        echo -e "${RED}${ICON_ERROR} No external drives found.${NC}"
        echo
        read -p "Press Enter to exit..."
        exit 1
    fi

    echo -e "${BOLD}${GREEN}Available Drives:${NC}"
    echo -e "${DIM}────────────────────────────────────────────────────────────${NC}"
    echo

    for i in "${!drives[@]}"; do
        drive="${drives[$i]}"
        
        # Get drive information
        size=$(lsblk -bno SIZE "$drive" 2>/dev/null | head -1)
        size_human=$(lsblk -no SIZE "$drive" 2>/dev/null | head -1)
        model=$(lsblk -no MODEL "$drive" 2>/dev/null | head -1 | xargs)
        vendor=$(lsblk -no VENDOR "$drive" 2>/dev/null | head -1 | xargs)
        tran=$(lsblk -no TRAN "$drive" 2>/dev/null | head -1)
        
        # Build friendly name
        friendly_name=""
        if [ -n "$vendor" ] && [ -n "$model" ]; then
            friendly_name="$vendor $model"
        elif [ -n "$model" ]; then
            friendly_name="$model"
        else
            friendly_name="Unknown Drive"
        fi
        
        # Get mount information
        mounted_parts=$(lsblk -no MOUNTPOINT "$drive" | grep -v "^$" | wc -l)
        mount_info=""
        if [ "$mounted_parts" -gt 0 ]; then
            mount_points=$(lsblk -no MOUNTPOINT "$drive" | grep -v "^$" | head -3)
            mount_info="${GREEN}${ICON_MOUNTED} Mounted${NC}"
            if [ "$mounted_parts" -gt 3 ]; then
                mount_info="$mount_info (${mounted_parts} locations)"
            fi
        else
            mount_info="${DIM}${ICON_UNMOUNTED} Not mounted${NC}"
        fi
        
        # Connection type icon
        conn_icon="${ICON_USB}"
        conn_type="USB"
        if [ "$tran" = "sata" ]; then
            conn_icon="💿"
            conn_type="SATA"
        elif [ "$tran" = "nvme" ]; then
            conn_icon="⚡"
            conn_type="NVMe"
        fi
        
        # Display drive info in a nice format
        echo -e "${BOLD}${YELLOW}[${NC}${BOLD}$((i+1))${YELLOW}]${NC} ${conn_icon} ${BOLD}${friendly_name}${NC}"
        echo -e "    ${DIM}├─${NC} ${CYAN}Device:${NC} ${drive}"
        echo -e "    ${DIM}├─${NC} ${CYAN}Size:${NC} ${size_human}"
        echo -e "    ${DIM}├─${NC} ${CYAN}Type:${NC} ${conn_type}"
        echo -e "    ${DIM}└─${NC} ${CYAN}Status:${NC} $mount_info"
        
        # Show mount points if any
        if [ "$mounted_parts" -gt 0 ] && [ "$mounted_parts" -le 3 ]; then
            while IFS= read -r mount_point; do
                echo -e "       ${DIM}→${NC} ${mount_point}"
            done <<< "$mount_points"
        fi
        
        echo
    done

    echo -e "${DIM}────────────────────────────────────────────────────────────${NC}"
}

# Main loop
while true; do
    show_drives
    
    echo
    echo -e "${BOLD}${CYAN}Options:${NC}"
    echo -e "  ${YELLOW}[1-${#drives[@]}]${NC} Select a drive to eject"
    echo -e "  ${YELLOW}[r]${NC} Refresh drive list"
    echo -e "  ${YELLOW}[q]${NC} Quit"
    echo
    read -p "$(echo -e ${BOLD}${GREEN}"Your choice: "${NC})" choice

    if [[ "$choice" == "q" ]] || [[ "$choice" == "Q" ]]; then
        echo -e "\n${CYAN}Goodbye!${NC}"
        exit 0
    fi
    
    if [[ "$choice" == "r" ]] || [[ "$choice" == "R" ]]; then
        continue
    fi

    # Validate input
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#drives[@]} ]; then
        echo -e "\n${RED}${ICON_ERROR} Invalid selection.${NC}"
        sleep 2
        continue
    fi

    selected_drive="${drives[$((choice-1))]}"
    
    show_header
    echo -e "${BOLD}${YELLOW}${ICON_WARNING} Selected: $selected_drive${NC}\n"

    # Unmount all partitions on the drive
    echo -e "${CYAN}${ICON_DRIVE} Unmounting all partitions...${NC}\n"
    mapfile -t partitions < <(lsblk -lno NAME "$selected_drive" | tail -n +2)

    unmount_failed=false
    for part in "${partitions[@]}"; do
        partition_path="/dev/$part"
        mountpoint=$(lsblk -no MOUNTPOINT "$partition_path")
        
        if [ -n "$mountpoint" ]; then
            echo -e "  ${DIM}→${NC} Unmounting ${partition_path} (${mountpoint})..."
            if udisksctl unmount -b "$partition_path" 2>/dev/null; then
                echo -e "    ${GREEN}${ICON_SUCCESS} Success${NC}"
            else
                echo -e "    ${RED}${ICON_ERROR} Failed${NC}"
                unmount_failed=true
            fi
        fi
    done

    if [ "$unmount_failed" = true ]; then
        echo -e "\n${RED}${ICON_ERROR} Some partitions failed to unmount.${NC}"
        echo -e "${YELLOW}${ICON_WARNING} The drive may still be in use.${NC}\n"
        read -p "Press Enter to continue..."
        continue
    fi

    # Power off the drive
    echo
    echo -e "${CYAN}${ICON_EJECT} Powering off the drive...${NC}\n"
    if udisksctl power-off -b "$selected_drive" 2>/dev/null; then
        echo -e "${GREEN}${ICON_SUCCESS} Drive $selected_drive has been safely ejected!${NC}"
        echo -e "${GREEN}${ICON_SUCCESS} You can now safely remove the drive.${NC}\n"
        read -p "Press Enter to continue..."
    else
        echo -e "${RED}${ICON_ERROR} Failed to power off the drive.${NC}\n"
        read -p "Press Enter to continue..."
    fi
done
